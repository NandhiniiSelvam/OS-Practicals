#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#define N 5 // Number of philosophers
pthread_mutex_t forks[N]; // One mutex for each fork
void* philosopher(void* arg) {
    int id = *(int*)arg;

    while (1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(1); // Thinking
        // Pick up forks (mutex locks)
        pthread_mutex_lock(&forks[id]);
        pthread_mutex_lock(&forks[(id + 1) % N]);
        printf("Philosopher %d is eating.\n", id);
        sleep(1); // Eating

        // Put down forks (unlock mutex)
        pthread_mutex_unlock(&forks[id]);
        pthread_mutex_unlock(&forks[(id + 1) % N]);
    }
    return NULL;
}
int main() {
    pthread_t philosophers[N];
    int ids[N];

    // Initialize mutexes for forks
    for (int i = 0; i < N; i++) 
        pthread_mutex_init(&forks[i], NULL);

    // Create philosopher threads
    for (int i = 0; i < N; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // Join threads (simulation runs indefinitely)
    for (int i = 0; i < N; i++) 
        pthread_join(philosophers[i], NULL);
    for (int i = 0; i < N; i++) 
        pthread_mutex_destroy(&forks[i]);

    return 0;
}
