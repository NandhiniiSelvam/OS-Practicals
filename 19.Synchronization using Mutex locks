#include <stdio.h>
#include <pthread.h>
pthread_mutex_t lock; // Mutex for synchronization
int shared_data = 0;  // Shared resource
void *increment(void *arg) {
    for (int i = 0; i < 5; i++) {
        pthread_mutex_lock(&lock); // Enter critical section
        shared_data++;
        printf("Thread %ld incremented shared_data to %d\n", (long)arg, shared_data);
        pthread_mutex_unlock(&lock); // Exit critical section
    }
    return NULL;
}
int main() {
    pthread_t t1, t2;

    pthread_mutex_init(&lock, NULL); // Initialize mutex

    pthread_create(&t1, NULL, increment, (void *)1); // Thread 1
    pthread_create(&t2, NULL, increment, (void *)2); // Thread 2

    pthread_join(t1, NULL); // Wait for threads to complete
    pthread_join(t2, NULL);

    pthread_mutex_destroy(&lock); // Destroy mutex

    printf("Final shared_data: %d\n", shared_data);
    return 0;
}
