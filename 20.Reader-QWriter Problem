#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

sem_t mutex, wrt; // Semaphores for synchronization
int reader_count = 0, shared_data = 0;

void *reader(void *arg) {
    sem_wait(&mutex);
    reader_count++;
    if (reader_count == 1) sem_wait(&wrt); // First reader locks writers
    sem_post(&mutex);

    // Reading
    printf("Reader %ld reads data = %d\n", (long)arg, shared_data);

    sem_wait(&mutex);
    reader_count--;
    if (reader_count == 0) sem_post(&wrt); // Last reader unlocks writers
    sem_post(&mutex);
    return NULL;
}

void *writer(void *arg) {
    sem_wait(&wrt); // Writers get exclusive access
    shared_data++;
    printf("Writer %ld writes data = %d\n", (long)arg, shared_data);
    sem_post(&wrt);
    return NULL;
}

int main() {
    pthread_t r1, r2, w1, w2;
    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    pthread_create(&r1, NULL, reader, (void *)1);
    pthread_create(&w1, NULL, writer, (void *)1);
    pthread_create(&r2, NULL, reader, (void *)2);
    pthread_create(&w2, NULL, writer, (void *)2);

    pthread_join(r1, NULL);
    pthread_join(w1, NULL);
    pthread_join(r2, NULL);
    pthread_join(w2, NULL);

    sem_destroy(&mutex);
    sem_destroy(&wrt);
    return 0;
}
